@page "/trays"

@using Microsoft.EntityFrameworkCore
@using TraysFastUpdate.Components.Pages.Dialogs
@using TraysFastUpdate.Models
@using TraysFastUpdate.Data
@using TraysFastUpdate.Services
@using TraysFastUpdate.Services.Contracts

@inject ITrayService TrayService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>

<MudText Typo="Typo.h5" Class="d-flex justify-center flex-grow-1 gap-4">Cable Trays</MudText>

<MudItem Class="d-flex justify-center align-stretch flex-grow-1 gap-4">
    <MudButton Href="/trays/create"
    Rel="nofollow"
    Variant="Variant.Filled"
    Color="Color.Primary">
        Add Tray
    </MudButton>
    <MudFileUpload @ref="@_fileUpload" T="IBrowserFile" OnFilesChanged="UploadFile" Accept=".xlsx">
        <ActivatorContent>
            <MudButton Variant="Variant.Filled"
            Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.CloudUpload">
                Add Trays from file
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>
    <MudItem>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.SimCardDownload" DropShadow="false" OnClick="@(() => ExportTableAsync())">Export Full Report</MudButton>
    </MudItem>
</MudItem>

<MudPaper Elevation="0" Class="pa-1 ma-2" Style="@($"background: #BDBDBD;")">
    @if (Elements == null || Elements.Count == 0)
    {
        <MudAlert Severity="Severity.Info">No Trays found.</MudAlert>
    }
    else
    {
        <MudDataGrid T="Tray" Items="@Elements" ReadOnly="true"
        Bordered="true" Dense="true" EditTrigger="DataGridEditTrigger.OnRowClick" Filterable="true" FilterMode="@DataGridFilterMode.ColumnFilterMenu" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" Virtualize="true" FixedHeader="true" Hover="true" RowClick="OnRowClick" >
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Tray Name" Hideable="false" CellClass="cursor-pointer" />
                <PropertyColumn Property="x => x.Type" Title="Tray Type" Hideable="false" CellClass="cursor-pointer" />
                <PropertyColumn Property="x => x.Purpose" Title="Tray Purpose" Hideable="false" CellClass="cursor-pointer" />
                <PropertyColumn Property="x => x.Width" Title="Tray Width [mm]" Hideable="false" CellClass="cursor-pointer" />
                <PropertyColumn Property="x => x.Height" Title="Tray Height [mm]" Hideable="false" CellClass="cursor-pointer" />
                <PropertyColumn Property="x => x.Length" Title="Tray Length [mm]" Hideable="false" CellClass="cursor-pointer" />
                <PropertyColumn Property="x => x.Weight" Title="Tray Weight [kg/m]" Hideable="false" CellClass="cursor-pointer" />
                <TemplateColumn Title="Available Space [%]" CellStyleFunc="@_cellStyleFunc" CellClass="cursor-pointer" >
                    <CellTemplate>
                        @if (context.Item.Purpose == "Type A (Pink color) for MV cables")
                        {
                            <MudText>N/A</MudText>
                        }
                        else
                        {
                            <MudText>@context.Item.SpaceAvailable</MudText>
                        }
                    </CellTemplate>                      
                </TemplateColumn>                
                <TemplateColumn Title="Actions" CellClass="d-flex justify-end" Sortable="false" Filterable="false" Editable="false">
                    <CellTemplate>
                        <MudTooltip Text="Delete">
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteTrayAsync(context.Item.Id))" />
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager PageSizeOptions="[15, 25, 50]" T="Tray" />
            </PagerContent>
        </MudDataGrid>
    }
</MudPaper>

@code {
    private List<Tray> Elements = new List<Tray>();

    private MudDataGrid<Tray> dataGrid = new MudDataGrid<Tray>();
    private IEnumerable<Tray> FilteredItems { get; set; } = new List<Tray>();

    private MudFileUpload<IBrowserFile> _fileUpload;

    private Task ClearAsync()
    => _fileUpload?.ClearAsync() ?? Task.CompletedTask;

    protected override async Task OnInitializedAsync()
    {
        _selectedItems = Elements.ToHashSet();
        _filterItems = Elements.ToHashSet();
        _filterDefinition = new FilterDefinition<Tray>
            {
                FilterFunction = x => _filterItems.Contains(x)
            };

        await ReloadDataAsync();
    }

    private async Task ReloadDataAsync()
    {
        Elements = await TrayService.GetTraysAsync();
        StateHasChanged();
    }

    private async Task DeleteTrayAsync(int trayId)
    {
        DialogParameters paremeters = new DialogParameters<DeleteDialog>
            {
                { x => x.Title , "Delete Tray?" },
                { x => x.Content, "Are you sure you want to delete this Tray?" },
                { x => x.Result, "Tray was deleted!" }
            };

        var dialogResult = await DialogService.ShowAsync<DeleteDialog>("", paremeters);
        var result = await dialogResult.Result;

        if (!result.Canceled)
        {
            await TrayService.DeleteTrayAsync(trayId);
            await ReloadDataAsync();
        }
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        try
        {
            await TrayService.UploadFromFileAsync(e.File);
        }
        catch (Exception)
        {
            Snackbar.Add("Error while uploading data from file!", Severity.Error);
        }
        finally
        {
            await ClearAsync();
            await ReloadDataAsync();
        }
    }

    private void OnRowClick(DataGridRowClickEventArgs<Tray> args)
    {
        NavigationManager.NavigateTo($"/trays/details/{args.Item.Id}");
    }

    private Func<Tray, string> _cellStyleFunc => x =>
    {
        string style = "";

        if (x.SpaceAvailable <= 30)
            style += "background-color:#FF0000";

        else if (x.SpaceAvailable > 30 && x.SpaceAvailable <= 70)
            style += "background-color:#8CED8C";

        else if (x.SpaceAvailable >= 70)
            style += "background-color:#F1F165";

        return style;
    };

    HashSet<Tray> _selectedItems = new();
    HashSet<Tray> _filterItems = new();
    FilterDefinition<Tray> _filterDefinition;
    bool _selectAll = true;
    string _icon = Icons.Material.Outlined.FilterAlt;

    bool _filterOpen = false;   

    void OpenFilter()
    {
        _filterOpen = true;
    }

    private void SelectedChanged(bool value, Tray item)
    {
        if (value)
            _selectedItems.Add(item);
        else
            _selectedItems.Remove(item);

        if (_selectedItems.Count == Elements.Count())
            _selectAll = true;
        else
            _selectAll = false;
    }

    private async Task ClearFilterAsync(FilterContext<Tray> context)
    {
        _selectedItems = Elements.ToHashSet();
        _filterItems = Elements.ToHashSet();
        _icon = Icons.Material.Outlined.FilterAlt;
        await context.Actions.ClearFilterAsync(_filterDefinition);
        _filterOpen = false;
    }

    private async Task ApplyFilterAsync(FilterContext<Tray> context)
    {
        _filterItems = _selectedItems.ToHashSet();
        _icon = _filterItems.Count == Elements.Count() ? Icons.Material.Outlined.FilterAlt : Icons.Material.Filled.FilterAlt;
        await context.Actions.ApplyFilterAsync(_filterDefinition);
        _filterOpen = false;
    }

    private void SelectAll(bool value)
    {
        _selectAll = value;

        if (value)
        {
            _selectedItems = Elements.ToHashSet();
        }
        else
        {
            _selectedItems.Clear();
        }
    }

    private async Task ExportTableAsync()
    {
        try
        {
            await TrayService.ExportTrayTableEntriesAsync();
            Snackbar.Add("Table was exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
