@page "/cables"

@using Microsoft.EntityFrameworkCore
@using TraysFastUpdate.Components.Pages.Dialogs
@using TraysFastUpdate.Models
@using TraysFastUpdate.Data
@using TraysFastUpdate.Services
@using TraysFastUpdate.Services.Contracts

@inject ICableService CableService
@inject ICableTypeService CableTypeService
@inject IDialogService DialogService
@inject ISnackbar Snackbar


<MudText Typo="Typo.h5" Class="d-flex justify-center flex-grow-1 gap-4">Cables </MudText>

<MudItem Class="d-flex justify-center align-stretch flex-grow-1 gap-4">
    <MudButton Href="/cables/create"
    Rel="nofollow"
    Variant="Variant.Filled"
    Color="Color.Primary">
        Add cable
    </MudButton>
    <MudFileUpload @ref="@_fileUpload" T="IBrowserFile" OnFilesChanged="UploadFile" Accept=".xlsx">
        <ActivatorContent>
            <MudButton Variant="Variant.Filled"
            Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.CloudUpload">
                Add cable from file
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>
</MudItem>

<MudPaper Elevation="0" Class="pa-1 ma-2" Style="@($"background: #BDBDBD;")">
    @if (Elements == null || Elements.Count == 0)
    {
        <MudAlert Severity="Severity.Info">No cables found.</MudAlert>
    }
    else
    {
        <MudDataGrid T="Cable" Items="@Elements" ReadOnly="false" EditMode="DataGridEditMode.Cell"
                     Bordered="true" Dense="true" EditTrigger="DataGridEditTrigger.OnRowClick" Filterable="true" FilterMode="@DataGridFilterMode.ColumnFilterMenu" Virtualize="true" FixedHeader="true" CommittedItemChanges="@CommittedItemChanges" ColumnResizeMode="ResizeMode.Column" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
            <Columns>
                <PropertyColumn Property="x => x.Tag" Title="Cable Tag" Hideable="false" />
                <PropertyColumn Property="x => x.CableType.Type" Title="Cable Type" Hideable="false">
                    <EditTemplate>
                        <MudSelect T="int" Value="@context.Item.CableTypeId" ValueChanged="@(async (int newValue) => await OnCableTypeChanged(context.Item, newValue))" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var cableType in CableTypes)
                            {
                                <MudSelectItem T="int" Value="@cableType.Id">@cableType.Type</MudSelectItem>
                            }
                        </MudSelect>
                    </EditTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.FromLocation" Title="Cable From Location" Hideable="false" />
                <PropertyColumn Property="x => x.ToLocation" Title="Cable To Location" Hideable="false" />
                <PropertyColumn Property="x => x.Routing" Title="Cable Routing" Hideable="false" />
                <TemplateColumn Title="Actions" CellClass="d-flex justify-end" Sortable="false" Filterable="false" Editable="false">
                    <CellTemplate>
                        <MudTooltip Text="Delete">
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteCableTypeAsync(context.Item.Id))" />
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager PageSizeOptions="[15, 25, 50]" T="Cable" />
            </PagerContent>
        </MudDataGrid>
    }
</MudPaper>


@code {
    private List<Cable> Elements = new List<Cable>();
    private List<CableType> CableTypes = new List<CableType>();

    private MudFileUpload<IBrowserFile> _fileUpload;

    private Task ClearAsync()
    => _fileUpload?.ClearAsync() ?? Task.CompletedTask;

    protected override async Task OnInitializedAsync()
    {
        await ReloadDataAsync();
    }

    private async Task ReloadDataAsync()
    {
        Elements = await CableService.GetCablesAsync();
        CableTypes = await CableTypeService.GetCablesTypesAsync();
    }

    private async Task DeleteCableTypeAsync(int cableTypeId)
    {
        DialogParameters paremeters = new DialogParameters<DeleteDialog>
            {
                { x => x.Title , "Delete Cable?" },
                { x => x.Content, "Are you sure you want to delete this cable?" },
                { x => x.Result, "Cable was deleted!" }
            };

        var dialogResult = await DialogService.ShowAsync<DeleteDialog>("", paremeters);
        var result = await dialogResult.Result;

        if (!result.Canceled)
        {
            await CableService.DeleteCableAsync(cableTypeId);
            await ReloadDataAsync();
        }
    }

    private async Task CommittedItemChanges(Cable item)
    {
        try
        {
            await CableService.UpdateCableAsync(item);
            Snackbar.Add("Cable type was updated!", Severity.Success);
            await ReloadDataAsync();
        }
        catch (Exception)
        {
            Snackbar.Add("Error while updating cable type!", Severity.Error);
        }
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        try
        {
            await CableService.UploadFromFileAsync(e.File);
            Snackbar.Add("Upload of cables from file succesful!", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Snackbar.Add("Error while uploading data from file!", Severity.Error);
        }
        finally
        {
            await ClearAsync();
            await ReloadDataAsync();
        }
    }

    private async Task OnCableTypeChanged(Cable item, int newValue)
    {
        item.CableTypeId = newValue;
        await CommittedItemChanges(item);
    }

}
