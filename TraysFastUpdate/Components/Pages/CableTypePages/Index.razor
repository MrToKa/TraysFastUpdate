@page "/cabletypes"

@using Microsoft.EntityFrameworkCore
@using TraysFastUpdate.Components.Pages.Dialogs
@using TraysFastUpdate.Models
@using TraysFastUpdate.Data
@using TraysFastUpdate.Services
@using TraysFastUpdate.Services.Contracts

@inject ICableTypeService CableTypeService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Index</PageTitle>

<MudText Typo="Typo.h5" Class="d-flex justify-center flex-grow-1 gap-4">Cable Types</MudText>

<MudItem Class="d-flex justify-center align-stretch flex-grow-1 gap-4">
    <MudButton Href="/cabletypes/create"
               Rel="nofollow"
               Variant="Variant.Filled"
               Color="Color.Primary">
        Add cable type
    </MudButton>
    <MudFileUpload @ref="@_fileUpload" T="IBrowserFile" OnFilesChanged="UploadFile" Accept=".xlsx">
        <ActivatorContent>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload">
                Add cable types from file
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>
</MudItem>

<MudPaper Elevation="0" Class="pa-1 ma-2" Style="@($"background: #BDBDBD;")">
    @if (Elements == null || Elements.Count == 0)
    {
        <MudAlert Severity="Severity.Info">No cables found.</MudAlert>
    }
    else
    {
        <MudDataGrid T="CableType" Items="@Elements" ReadOnly="false" EditMode="DataGridEditMode.Cell"
                     Bordered="true" Dense="true" EditTrigger="DataGridEditTrigger.OnRowClick" Filterable="true" FilterMode="@DataGridFilterMode.ColumnFilterMenu" Virtualize="true" FixedHeader="true" CommittedItemChanges="@CommittedItemChanges">
            <Columns>
                <PropertyColumn Property="x => x.Type" Title="Cable Type" Hideable="false" />
                <PropertyColumn Property="x => x.Purpose" Title="Cable Purpose" Hideable="false" />
                <PropertyColumn Property="x => x.Diameter" Title="Cable Diameter [mm]" Hideable="false" />
                <PropertyColumn Property="x => x.Weight" Title="Cable Weight [kg/m]" Hideable="false" />
                <TemplateColumn Title="Actions" CellClass="d-flex justify-end" Sortable="false" Filterable="false" Editable="false">
                    <CellTemplate>
                        <MudTooltip Text="Delete">
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteCableTypeAsync(context.Item.Id))" />
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager PageSizeOptions="[15, 25, 50]" T="CableType" />
            </PagerContent>
        </MudDataGrid>
    }
</MudPaper>

@code {
    private MudTheme Theme = new MudTheme();

    private List<CableType> Elements = new List<CableType>();

    private MudFileUpload<IBrowserFile> _fileUpload;

    private Task ClearAsync()
    => _fileUpload?.ClearAsync() ?? Task.CompletedTask;

    protected override async Task OnInitializedAsync()
    {
        await ReloadDataAsync();
    }

    private async Task ReloadDataAsync()
    {
        Elements = await CableTypeService.GetCablesTypesAsync();
        StateHasChanged();
    }

    private async Task DeleteCableTypeAsync(int cableTypeId)
    {
        DialogParameters paremeters = new DialogParameters<DeleteDialog>
            {
                { x => x.Title , "Delete Cable Type?" },
                { x => x.Content, "Are you sure you want to delete this cable type?" },
                { x => x.Result, "Cable type was deleted!" }
            };

        var dialogResult = await DialogService.ShowAsync<DeleteDialog>("", paremeters);
        var result = await dialogResult.Result;

        if (!result.Canceled)
        {
            await CableTypeService.DeleteCableTypeAsync(cableTypeId);
            await ReloadDataAsync();
        }
    }

    private async Task CommittedItemChanges(CableType item)
    {
        Snackbar.Add("Cable type was updated!", Severity.Success);
        await CableTypeService.UpdateCableTypeAsync(item);
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        try
        {
            await CableTypeService.UploadFromFileAsync(e.File);
        }
        catch (Exception)
        {
            Snackbar.Add("Error while uploading file!", Severity.Error);
        }
        finally
        {
            await ClearAsync();
            await ReloadDataAsync();
        }
    }
}
